{"ast":null,"code":"var _jsxFileName = \"/Users/seong-eunkim/Desktop/st21-terraViz/terraviz/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport \"./Map.css\";\nimport Sidebar from \"./Sidebar\";\nimport \"./Sidebar.css\"; // Insert your access token here\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = process.env.REACT_APP_API_KEY;\n\nconst Map = () => {\n  _s();\n\n  const mapContainer = useRef(null);\n  const [sidebar, setSidebar] = useState(false);\n  const [map, setMap] = useState(null);\n\n  const onToggleSidebar = () => setSidebar(!sidebar);\n\n  useEffect(() => {\n    // Prevent the map from rerendering every single time\n    if (map !== null) {\n      return;\n    } // Initialize base map with basic settings, render it into mapContainer\n\n\n    const defaultMap = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [17, 30],\n      zoom: 1\n    }); //Fetch .json file and load the data as circle layer\n\n    defaultMap.on(\"load\", function () {\n      fetch(\"mock.json\").then(res => res.json()).then(data => {\n        defaultMap.addSource(\"point\", {\n          type: \"geojson\",\n          data: data\n        });\n        defaultMap.addLayer({\n          id: \"circles\",\n          source: \"point\",\n          type: \"circle\",\n          paint: {\n            \"circle-color\": \"purple\",\n            \"circle-stroke-color\": \"pink\",\n            \"circle-opacity\": 0.8,\n            \"circle-radius\": 7,\n            \"circle-stroke-width\": 2\n          },\n          layout: {}\n        });\n      }).catch(err => console.error(err));\n    });\n    setMap(defaultMap);\n  }, [map]); // Making our map responsive to toggling the sidebar\n\n  useEffect(() => {\n    if (map !== null) {\n      map.resize();\n    }\n  }, [map, sidebar]);\n  return (\n    /*#__PURE__*/\n    // <div className=\"wrapper\">\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        onToggleSidebar: onToggleSidebar,\n        sidebar: sidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapContainer,\n        className: \"map-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this) // </div>\n\n  );\n};\n\n_s(Map, \"eZ+eCyTUfjrMIjhp3nmQRAcpgZ4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/seong-eunkim/Desktop/st21-terraViz/terraviz/src/components/Map.js"],"names":["React","useState","useRef","useEffect","mapboxgl","Sidebar","accessToken","process","env","REACT_APP_API_KEY","Map","mapContainer","sidebar","setSidebar","map","setMap","onToggleSidebar","defaultMap","container","current","style","center","zoom","on","fetch","then","res","json","data","addSource","type","addLayer","id","source","paint","layout","catch","err","console","error","resize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAAmC;;AACnC,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,eAAP,C,CAEA;;;AACAD,QAAQ,CAACE,WAAT,GAAuBC,OAAO,CAACC,GAAR,CAAYC,iBAAnC;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,YAAY,GAAGT,MAAM,CAAC,IAAD,CAA3B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,IAAD,CAA9B;;AACA,QAAMe,eAAe,GAAG,MAAMH,UAAU,CAAC,CAACD,OAAF,CAAxC;;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIW,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACD,KAJa,CAMd;;;AACA,UAAMG,UAAU,GAAG,IAAIb,QAAQ,CAACM,GAAb,CAAiB;AAClCQ,MAAAA,SAAS,EAAEP,YAAY,CAACQ,OADU;AAElCC,MAAAA,KAAK,EAAE,iCAF2B;AAGlCC,MAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAH0B;AAIlCC,MAAAA,IAAI,EAAE;AAJ4B,KAAjB,CAAnB,CAPc,CAcd;;AACAL,IAAAA,UAAU,CAACM,EAAX,CAAc,MAAd,EAAsB,YAAY;AAChCC,MAAAA,KAAK,CAAC,WAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdX,QAAAA,UAAU,CAACY,SAAX,CAAqB,OAArB,EAA8B;AAC5BC,UAAAA,IAAI,EAAE,SADsB;AAE5BF,UAAAA,IAAI,EAAEA;AAFsB,SAA9B;AAIAX,QAAAA,UAAU,CAACc,QAAX,CAAoB;AAClBC,UAAAA,EAAE,EAAE,SADc;AAElBC,UAAAA,MAAM,EAAE,OAFU;AAGlBH,UAAAA,IAAI,EAAE,QAHY;AAIlBI,UAAAA,KAAK,EAAE;AACL,4BAAgB,QADX;AAEL,mCAAuB,MAFlB;AAGL,8BAAkB,GAHb;AAIL,6BAAiB,CAJZ;AAKL,mCAAuB;AALlB,WAJW;AAWlBC,UAAAA,MAAM,EAAE;AAXU,SAApB;AAaD,OApBH,EAqBGC,KArBH,CAqBUC,GAAD,IAASC,OAAO,CAACC,KAAR,CAAcF,GAAd,CArBlB;AAsBD,KAvBD;AAyBAtB,IAAAA,MAAM,CAACE,UAAD,CAAN;AACD,GAzCQ,EAyCN,CAACH,GAAD,CAzCM,CAAT,CANgB,CAiDhB;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,GAAG,KAAK,IAAZ,EAAkB;AAChBA,MAAAA,GAAG,CAAC0B,MAAJ;AACD;AACF,GAJQ,EAIN,CAAC1B,GAAD,EAAMF,OAAN,CAJM,CAAT;AAMA;AAAA;AACE;AACA;AAAA,8BACD,QAAC,OAAD;AAAS,QAAA,eAAe,EAAEI,eAA1B;AAA2C,QAAA,OAAO,EAAEJ;AAApD;AAAA;AAAA;AAAA;AAAA,cADC,eAEE;AAAK,QAAA,GAAG,EAAED,YAAV;AAAwB,QAAA,SAAS,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CAOE;;AAPF;AAUD,CAlED;;GAAMD,G;;KAAAA,G;AAoEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\nimport \"./Map.css\";\nimport Sidebar from \"./Sidebar\";\nimport \"./Sidebar.css\";\n\n// Insert your access token here\nmapboxgl.accessToken = process.env.REACT_APP_API_KEY;\n\nconst Map = () => {\n  const mapContainer = useRef(null);\n  const [sidebar, setSidebar] = useState(false);\n  const [map, setMap] = useState(null);\n  const onToggleSidebar = () => setSidebar(!sidebar);\n\n  useEffect(() => {\n    // Prevent the map from rerendering every single time\n    if (map !== null) {\n      return;\n    }\n\n    // Initialize base map with basic settings, render it into mapContainer\n    const defaultMap = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [17, 30],\n      zoom: 1,\n    });\n\n    //Fetch .json file and load the data as circle layer\n    defaultMap.on(\"load\", function () {\n      fetch(\"mock.json\")\n        .then((res) => res.json())\n        .then((data) => {\n          defaultMap.addSource(\"point\", {\n            type: \"geojson\",\n            data: data,\n          });\n          defaultMap.addLayer({\n            id: \"circles\",\n            source: \"point\",\n            type: \"circle\",\n            paint: {\n              \"circle-color\": \"purple\",\n              \"circle-stroke-color\": \"pink\",\n              \"circle-opacity\": 0.8,\n              \"circle-radius\": 7,\n              \"circle-stroke-width\": 2,\n            },\n            layout: {},\n          });\n        })\n        .catch((err) => console.error(err));\n    });\n\n    setMap(defaultMap);\n  }, [map]);\n\n  // Making our map responsive to toggling the sidebar\n  useEffect(() => {\n    if (map !== null) {\n      map.resize();\n    }\n  }, [map, sidebar]);\n\n  return (\n    // <div className=\"wrapper\">\n    <div>\n   <Sidebar onToggleSidebar={onToggleSidebar} sidebar={sidebar} />\n      <div ref={mapContainer} className=\"map-container\"></div>\n    </div>\n   \n    // </div>\n  \n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}