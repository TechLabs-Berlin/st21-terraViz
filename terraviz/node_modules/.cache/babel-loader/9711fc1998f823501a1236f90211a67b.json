{"ast":null,"code":"var _jsxFileName = \"/Users/seong-eunkim/Desktop/st21-terraViz/terraviz/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport \"./Map.css\";\nimport Sidebar from \"./Sidebar\";\nimport \"./Sidebar.css\"; // Insert your access token here\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = process.env.REACT_APP_API_KEY;\n\nconst Map = () => {\n  _s();\n\n  const mapContainer = useRef(null);\n  const [sidebar, setSidebar] = useState(false);\n  const [map, setMap] = useState(null);\n\n  const onToggleSidebar = () => setSidebar(!sidebar);\n\n  const [data, setData] = useState([]);\n\n  const getData = () => {\n    fetch('mock.json').then(function (res) {\n      console.log(res);\n      return res.json();\n    }).then(function (myJson) {\n      console.log(myJson);\n      setData(myJson);\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    // Prevent the map from rerendering every single time\n    if (map !== null) {\n      return;\n    } // Initialize base map with basic settings, render it into mapContainer\n\n\n    const defaultMap = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/light-v10\",\n      center: [17, 30],\n      zoom: 1\n    });\n    defaultMap.on('load', function () {\n      defaultMap.addSource('point', {\n        type: 'geojson',\n        data: data\n      });\n      defaultMap.addLayer({\n        id: \"circles\",\n        source: \"point\",\n        type: \"circle\",\n        paint: {\n          \"circle-color\": \"red\"\n        },\n        layout: {}\n      });\n    });\n    setMap(defaultMap);\n  }, [data, map]); // Making our map responsive to toggling the sidebar\n\n  useEffect(() => {\n    if (map !== null) {\n      map.resize();\n    }\n  }, [map]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onToggleSidebar: onToggleSidebar,\n      sidebar: sidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"baLiKNG8RR1K9TLeLffKQwqBFS4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/seong-eunkim/Desktop/st21-terraViz/terraviz/src/components/Map.js"],"names":["React","useState","useRef","useEffect","mapboxgl","Sidebar","accessToken","process","env","REACT_APP_API_KEY","Map","mapContainer","sidebar","setSidebar","map","setMap","onToggleSidebar","data","setData","getData","fetch","then","res","console","log","json","myJson","defaultMap","container","current","style","center","zoom","on","addSource","type","addLayer","id","source","paint","layout","resize"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"!mapbox-gl\"; // eslint-disable-line import/no-webpack-loader-syntax\nimport \"./Map.css\";\nimport Sidebar from \"./Sidebar\";\nimport \"./Sidebar.css\";\n\n\n\n// Insert your access token here\nmapboxgl.accessToken = process.env.REACT_APP_API_KEY;\n\nconst Map = () => {\n  const mapContainer = useRef(null);\n  const [sidebar, setSidebar] = useState(false);\n  const [map, setMap] = useState(null);\n  const onToggleSidebar = () => setSidebar(!sidebar);\n  const [data, setData] = useState([]);\n\n  const getData = () => {\n    fetch('mock.json')\n    .then(function(res) {\n      console.log(res)\n      return res.json();\n    })\n    .then(function(myJson) {\n      console.log(myJson);\n      setData(myJson)\n    });\n  }\n  useEffect(() => {\n    getData()\n  }, [])\n\n  \n\n\n  useEffect(() => {\n    // Prevent the map from rerendering every single time\n    if (map !== null) {\n      return;\n    }\n\n    // Initialize base map with basic settings, render it into mapContainer\n    const defaultMap = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/light-v10\",\n      center: [17, 30],\n      zoom: 1,\n    });\n\n    defaultMap.on('load', function() {\n    defaultMap.addSource('point', {\n      type : 'geojson',\n      data: data,\n    });\n    \n    defaultMap.addLayer({\n      id: \"circles\",\n      source: \"point\",\n      type: \"circle\",\n      paint: {\n        \"circle-color\": \"red\",\n      },\n      layout: {},\n    });\n  });\n\n\n\n    setMap(defaultMap);\n  }, [data, map]);\n \n\n  // Making our map responsive to toggling the sidebar\n  useEffect(() => {\n    if (map !== null) {\n      map.resize();\n    }\n  }, [map]);\n\n  return (\n    <div className=\"wrapper\">\n      <Sidebar onToggleSidebar={onToggleSidebar} sidebar={sidebar} />\n      <div ref={mapContainer} className=\"map-container\"></div>\n    </div>\n  );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}